/* ==========================================================================
    Licensed under BSD 2clause license. See LICENSE file for more information
    Author: Michał Łyszczek <michal.lyszczek@bofc.pl>
   ========================================================================== */


#ifndef EMBEDLOG_H
#define EMBEDLOG_H 1

#include <stddef.h>
#include <stdarg.h>
#include <stdio.h>

#if @ENABLE_PTHREAD@
#   include <pthread.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifdef NOFINFO
#   define ELF NULL, 0, NULL, EL_FATAL
#   define ELA NULL, 0, NULL, EL_ALERT
#   define ELC NULL, 0, NULL, EL_CRIT
#   define ELE NULL, 0, NULL, EL_ERROR
#   define ELW NULL, 0, NULL, EL_WARN
#   define ELN NULL, 0, NULL, EL_NOTICE
#   define ELI NULL, 0, NULL, EL_INFO
#   define ELD NULL, 0, NULL, EL_DBG

#   define OELF NULL, 0, NULL, EL_FATAL, EL_OPTIONS_OBJECT
#   define OELA NULL, 0, NULL, EL_ALERT, EL_OPTIONS_OBJECT
#   define OELC NULL, 0, NULL, EL_CRIT, EL_OPTIONS_OBJECT
#   define OELE NULL, 0, NULL, EL_ERROR, EL_OPTIONS_OBJECT
#   define OELW NULL, 0, NULL, EL_WARN, EL_OPTIONS_OBJECT
#   define OELN NULL, 0, NULL, EL_NOTICE, EL_OPTIONS_OBJECT
#   define OELI NULL, 0, NULL, EL_INFO, EL_OPTIONS_OBJECT
#   define OELD NULL, 0, NULL, EL_DBG, EL_OPTIONS_OBJECT
#else
#   define ELF __FILE__, __LINE__, EL_FUNC_NAME, EL_FATAL
#   define ELA __FILE__, __LINE__, EL_FUNC_NAME, EL_ALERT
#   define ELC __FILE__, __LINE__, EL_FUNC_NAME, EL_CRIT
#   define ELE __FILE__, __LINE__, EL_FUNC_NAME, EL_ERROR
#   define ELW __FILE__, __LINE__, EL_FUNC_NAME, EL_WARN
#   define ELN __FILE__, __LINE__, EL_FUNC_NAME, EL_NOTICE
#   define ELI __FILE__, __LINE__, EL_FUNC_NAME, EL_INFO
#   define ELD __FILE__, __LINE__, EL_FUNC_NAME, EL_DBG

#   define OELF __FILE__, __LINE__, EL_FUNC_NAME, EL_FATAL, EL_OPTIONS_OBJECT
#   define OELA __FILE__, __LINE__, EL_FUNC_NAME, EL_ALERT, EL_OPTIONS_OBJECT
#   define OELC __FILE__, __LINE__, EL_FUNC_NAME, EL_CRIT, EL_OPTIONS_OBJECT
#   define OELE __FILE__, __LINE__, EL_FUNC_NAME, EL_ERROR, EL_OPTIONS_OBJECT
#   define OELW __FILE__, __LINE__, EL_FUNC_NAME, EL_WARN, EL_OPTIONS_OBJECT
#   define OELN __FILE__, __LINE__, EL_FUNC_NAME, EL_NOTICE, EL_OPTIONS_OBJECT
#   define OELI __FILE__, __LINE__, EL_FUNC_NAME, EL_INFO, EL_OPTIONS_OBJECT
#   define OELD __FILE__, __LINE__, EL_FUNC_NAME, EL_DBG, EL_OPTIONS_OBJECT
#endif

#if (__STDC_VERSION__ >= 199901L)
    /* options for c99 users, they can afford more */
#   define EL_FUNC_NAME __func__
#   ifdef NDEBUG
#       define EL_DEBUG(...) ((void)0)
#   else
#       define EL_DEBUG(...) el_print(ELD, __VA_ARGS__)
#   endif
#else
#   define EL_FUNC_NAME NULL
#endif

/* Define PRINTFLIKE macro for warnings on misused el_print function */
#if !defined(PRINTFLIKE)
#   if defined(__GNUC__)
#       define PRINTFLIKE(n,m) __attribute__((format(printf,n,m)))
#   else
#       define PRINTFLIKE(n,m)
#   endif /* __GNUC__ */
#endif /* PRINTFLIKE */

/* enum values, new enums can be added, but values of already
 * existing enums *must* stay unchanged, to keep ABI stable! */

enum el_output
{
	EL_OUT_NONE   = 0x0000,
	EL_OUT_STDERR = 0x0001,
	EL_OUT_STDOUT = 0x0002,
	EL_OUT_SYSLOG = 0x0004,
	EL_OUT_FILE   = 0x0008,
	EL_OUT_NET    = 0x0010,
	EL_OUT_TTY    = 0x0020,
	EL_OUT_CUSTOM = 0x0040,
	EL_OUT_ALL    = 0x7fff
};

enum el_level
{
	EL_FATAL  = 0,
	EL_ALERT  = 1,
	EL_CRIT   = 2,
	EL_ERROR  = 3,
	EL_WARN   = 4,
	EL_NOTICE = 5,
	EL_INFO   = 6,
	EL_DBG    = 7
};

enum el_option
{
	EL_LEVEL          = 0,
	EL_OUT            = 1,
	EL_COLORS         = 2,
	EL_TS             = 3,
	EL_TS_TM          = 4,
	EL_TS_FRACT       = 5,
	EL_PRINT_LEVEL    = 6,
	EL_PRINT_NL       = 7,
	EL_FINFO          = 8,
	EL_FUNCINFO       = 9,
	EL_CUSTOM_PUTS    = 10,  /* deprecated */
	EL_CUSTOM_PUT     = 10,
	EL_TTY_DEV        = 11,
	EL_PREFIX         = 12,

	EL_FPATH          = 13,
	EL_FROTATE_NUMBER = 14,
	EL_FROTATE_SIZE   = 15,
	EL_FROTATE_SYMLINK= 19,
	EL_FROTATE_DATE   = 21,
	EL_FSYNC_EVERY    = 16,
	EL_FSYNC_LEVEL    = 17,
	EL_FILE_SYNC_EVERY= 16,  /* deprecated */
	EL_FILE_SYNC_LEVEL= 17,  /* deprecated */

	EL_THREAD_SAFE    = 18,
	EL_PMEMORY_SPACE  = 20,

	/* internal use only, should represent number of options, if
	 * you add option, increment this by one (or by the number of
	 * options you add). */
	EL_OPT_ERROR      = 22
};

enum el_option_timestamp
{
	EL_TS_OFF   = 0,
	EL_TS_SHORT = 1,
	EL_TS_LONG  = 2,

	/* internal use only, should represent number of options, if
	 * you add option, increment this by one (or by the number of
	 * options you add). */
	EL_TS_ERROR = 3
};

enum el_option_timestamp_timer
{
	EL_TS_TM_TIME      = 0,
	EL_TS_TM_CLOCK     = 1,
	EL_TS_TM_REALTIME  = 2,
	EL_TS_TM_MONOTONIC = 3,

	/* internal use only, should represent number of options, if
	 * you add option, increment this by one (or by the number of
	 * options you add). */
	EL_TS_TM_ERROR     = 4
};

enum el_option_timestamp_fractions
{
	EL_TS_FRACT_OFF   = 0,
	EL_TS_FRACT_MS    = 1,
	EL_TS_FRACT_US    = 2,
	EL_TS_FRACT_NS    = 3,

	/* internal use only, should represent number of options, if
	 * you add option, increment this by one (or by the number of
	 * options you add). */

	EL_TS_FRACT_ERROR = 4
};

enum el_option_rotate
{
	/* Date related rotation. Strangely enough, these are negative
	 * so that el_enable_file_log can distinguish between size
	 * rotation and date rotation. */
	EL_ROT_DATE_SEC  = -6,
	EL_ROT_DATE_MIN  = -5,
	EL_ROT_DATE_HOUR = -4,
	EL_ROT_DATE_DAY  = -3,
	EL_ROT_DATE_MON  = -2,
	EL_ROT_DATE_YEAR = -1,

	EL_ROT_OFF        = 0,

	/* Rotate by file size */
	EL_ROT_FSIZE      = 1,
};

#define EL_IS_ROT_DATE(el) ((el)->frotate_type <= EL_ROT_DATE_YEAR && \
		(el)->frotate_type >= EL_ROT_DATE_SEC)

/* Definition of binary format for flags */
#define EL_FLAG_TS             (0x01)

#define EL_FLAG_TS_FRACT_NONE  (0x00)
#define EL_FLAG_TS_FRACT_NSEC  (0x01)
#define EL_FLAG_TS_FRACT_USEC  (0x02)
#define EL_FLAG_TS_FRACT_MSEC  (0x03)
#define EL_FLAG_TS_FRACT_MASK  (0x03)
#define EL_FLAG_TS_FRACT_SHIFT (1)

#define EL_FLAG_LEVEL_MASK     (0x07)
#define EL_FLAG_LEVEL_SHIFT    (3)


typedef int (*el_custom_put)(const char *s, size_t slen, void *user);

/* Main embedlog object that holds printing options and other data.
 * This definition is here so people that don't care about stable
 * ABI can avoid mallocs and allocate objects on stack. Check
 * el_overview(7) for more information about this.
 *
 * Any #if [0,1] in this struct is generated during compilation and
 * should no be changed without library recompilation, unless you
 * like when your program executes undefined behaviour.
 *
 * It's generated as #if [0,1] so this is applied system-wide, if
 * it were to be defined like #if ENABLE_OUT_FILE, then every
 * compilation unit that uses embedlog would have to define that to
 * either 1 or 0. Easy for mistakes and hard to find bugs. */
struct el
{
	unsigned int    outputs:7;
	unsigned int    colors:1;
	unsigned int    timestamp:2;
	unsigned int    timestamp_timer:3;
	unsigned int    timestamp_fractions:2;
	unsigned int    print_log_level:1;
	unsigned int    print_newline:1;
	unsigned int    finfo:1;
	unsigned int    funcinfo:1;
	unsigned int    level:3;
	unsigned int    level_current_msg:3;
	unsigned int    pmemory_space:2;

#if @ENABLE_OUT_FILE@
	unsigned int    fsync_level:3;
	unsigned int    frotate_symlink:1;
	unsigned int    frotate_number_count:3;
	signed char     frotate_type;
	unsigned short  frotate_datewatch;
	unsigned short  frotate_number;
	unsigned short  fcurrent_rotate;
	unsigned long   frotate_size;
	unsigned long   fsync_every;
	unsigned long   fwritten_after_sync;
	unsigned long   fpos;
	FILE           *file;
	char           *fcurrent_log;
	const char     *fname;
#endif

#if @ENABLE_OUT_TTY@
	int             serial_fd;
#endif

#if @ENABLE_PREFIX@
	const char     *prefix;
#endif

#if @ENABLE_OUT_CUSTOM@
	el_custom_put   custom_put;
	void           *custom_put_user;
#endif

#if @ENABLE_PTHREAD@
	pthread_mutex_t lock;
	int             lock_initialized;
#endif
};

#ifndef DISABLE_ALL_EMBEDLOG

int el_init(void);
int el_cleanup(void);
int el_option(int option, ...);
int el_puts(const char *string);
int el_print(const char *file, size_t line, const char *func,
		enum el_level level, const char *fmt, ...) PRINTFLIKE(5, 6);
int el_vprint(const char *file, size_t line, const char *func,
		enum el_level level, const char *fmt, va_list ap);
int el_pmemory(const char *file, size_t line, const char *func,
		enum el_level level, const void *memory, size_t mlen);
int el_pmemory_table(const char *file, size_t line, const char *func,
		enum el_level level, const void *memory, size_t mlen);
int el_perror(const char *file, size_t line, const char *func,
		enum el_level level, const char *fmt, ...) PRINTFLIKE(5, 6);
int el_putb(const void *memory, size_t mlen);
int el_pbinary(enum el_level level, const void *memory, size_t mlen);
const struct el *el_get_el(void);
int el_flush(void);

struct el * el_new(void);
int el_destroy(struct el *el);

int el_oinit(struct el *el);
int el_ocleanup(struct el *el);
int el_ooption(struct el *el, int option, ...);
int el_oputs(struct el *el, const char *string);
int el_oprint(const char *file, size_t line, const char *func,
		enum el_level level, struct el *el, const char *fnt, ...)
		PRINTFLIKE(6, 7);
int el_ovprint(const char *file, size_t line, const char *func,
		enum el_level level, struct el *el, const char *fmt,
		va_list ap);
int el_opmemory(const char *file, size_t line, const char *func,
		enum el_level level, struct el *el, const void *memory,
		size_t mlen);
int el_opmemory_table(const char *file, size_t line, const char *func,
		enum el_level level, struct el *el, const void *memory,
		size_t mlen);
int el_operror(const char *file, size_t line, const char *func,
		enum el_level level, struct el *el, const char *fmt, ...)
		PRINTFLIKE(6, 7);
int el_oputb(struct el *el, const void *memory, size_t mlen);
int el_opbinary(enum el_level level, struct el *el,
		const void *memory, size_t mlen);
int el_oflush(struct el *el);

/* Shortcut for most frequently used options */

int el_set_log_level(enum el_level level);
int el_enable_output(enum el_output output);
int el_disable_output(enum el_output output);
int el_set_prefix(const char *prefix);
int el_set_timestamp(enum el_option_timestamp timestamp,
		enum el_option_timestamp_timer timer,
		enum el_option_timestamp_fractions fraction);
int el_enable_colors(int enable);
int el_print_extra_info(int print);
int el_set_custom_put(el_custom_put clbk, void *user);
int el_enable_file_log(const char *path, int rotate_number, long rotate_size);
int el_set_file_sync(long sync_every, enum el_level level);
int el_set_tty_dev(const char *dev, unsigned speed);
int el_enable_thread_safe(int enable);

int el_oset_log_level(struct el *el, enum el_level level);
int el_oenable_output(struct el *el, enum el_output output);
int el_odisable_output(struct el *el, enum el_output output);
int el_oset_prefix(struct el *el, const char *prefix);
int el_oset_timestamp(struct el *el, enum el_option_timestamp timestamp,
		enum el_option_timestamp_timer timer,
		enum el_option_timestamp_fractions fraction);
int el_oenable_colors(struct el *el, int enable);
int el_oprint_extra_info(struct el *el, int print);
int el_oset_custom_put(struct el *el, el_custom_put clbk, void *user);
int el_oenable_file_log(struct el *el, const char *path,
		int rotate_number, long rotate_size);
int el_oset_file_sync(struct el *el, long sync_every, enum el_level level);
int el_oset_tty_dev(struct el *el, const char *dev, unsigned speed);
int el_oenable_thread_safe(struct el *el, int enable);

#else /* DISABLE_ALL_EMBEDLOG */
static inline int el_nothing_int(void) { return 0; }
static inline void *el_nothing_ptr(void) { return (void *)0; }

#define el_init(...) el_nothing_int()
#define el_cleanup(...) el_nothing_int()
#define el_option(...) el_nothing_int()
#define el_puts(...) el_nothing_int()
#define el_print(...) el_nothing_int()
#define el_vprint(...) el_nothing_int()
#define el_pmemory(...) el_nothing_int()
#define el_pmemory_table(...) el_nothing_int()
#define el_perror(...) el_nothing_int()
#define el_putb(...) el_nothing_int()
#define el_pbinary(...) el_nothing_int()
#define el_get_el(...) el_nothing_ptr()
#define el_flush(...) el_nothing_int()
#define el_new(...) el_nothing_ptr()
#define el_destroy(...) el_nothing_int()
#define el_oinit(...) el_nothing_int()
#define el_ocleanup(...) el_nothing_int()
#define el_ooption(...) el_nothing_int()
#define el_oputs(...) el_nothing_int()
#define el_oprint(...) el_nothing_int()
#define el_ovprint(...) el_nothing_int()
#define el_opmemory(...) el_nothing_int()
#define el_opmemory_table(...) el_nothing_int()
#define el_operror(...) el_nothing_int()
#define el_oputb(...) el_nothing_int()
#define el_opbinary(...) el_nothing_int()
#define el_oflush(...) el_nothing_int()
#define el_set_log_level(...) el_nothing_int()
#define el_enable_output(...) el_nothing_int()
#define el_disable_output(...) el_nothing_int()
#define el_set_prefix(...) el_nothing_int()
#define el_set_timestamp(...) el_nothing_int()
#define el_enable_colors(...) el_nothing_int()
#define el_print_extra_info(...) el_nothing_int()
#define el_set_custom_put(...) el_nothing_int()
#define el_enable_file_log(...) el_nothing_int()
#define el_set_file_sync(...) el_nothing_int()
#define el_set_tty_dev(...) el_nothing_int()
#define el_enable_thread_safe(...) el_nothing_int()
#define el_oset_log_level(...) el_nothing_int()
#define el_oenable_output(...) el_nothing_int()
#define el_odisable_output(...) el_nothing_int()
#define el_oset_prefix(...) el_nothing_int()
#define el_oset_timestamp(...) el_nothing_int()
#define el_oenable_colors(...) el_nothing_int()
#define el_oprint_extra_info(...) el_nothing_int()
#define el_oset_custom_put(...) el_nothing_int()
#define el_oenable_file_log(...) el_nothing_int()
#define el_oset_file_sync(...) el_nothing_int()
#define el_oset_tty_dev(...) el_nothing_int()
#define el_oenable_thread_safe(...) el_nothing_int()

#endif /* DISABLE_ALL_EMBEDLOG */
#ifdef __cplusplus
}
#endif

#endif
